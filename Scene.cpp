#include "Scene.h"
#include <stdio.h>
#include "Globals.h"
#include "Game.h"

Scene::Scene():currentStage(0)
{
	player = nullptr;
	level = nullptr;
	enemy_x = nullptr;
	door = nullptr;

	camera.target = { 0, 0 };				//Center of the screen
	camera.offset = { 0, MARGIN_GUI_Y };	//Offset from the target (center of the screen)
	camera.rotation = 0.0f;					//No rotation
	camera.zoom = 1.0f;						//Default zoom

	debug = DebugMode::OFF;
}
Scene::~Scene()
{
	if (player != nullptr)
	{
		player->Release();
		delete player;
		player = nullptr;
	}
	if (level != nullptr)
	{
		level->Release();
		delete level;
		level = nullptr;
	}
	if (enemy_x != nullptr)
	{
		enemy_x->Release();
		delete enemy_x;
		enemy_x = nullptr;
	}
	if (door != nullptr)
	{
		door->Release();
		delete door;
		door = nullptr;
	}
	for (Entity* obj : objects)
	{
		delete obj;
	}
	objects.clear();
}
AppStatus Scene::Init()
{
	//Create player
	player = new Player({ 0,0 }, State::IDLE, Look::RIGHT);
	if (player == nullptr)
	{
		LOG("Failed to allocate memory for Player");
		return AppStatus::ERROR;
	}
	//Initialise player
	if (player->Initialise() != AppStatus::OK)
	{
		LOG("Failed to initialise Player");
		return AppStatus::ERROR;
	}
	//Create and initialise stats
	player->stats = new Stats();
	if (player->stats == nullptr)
	{
		LOG("Failed to allocate memory for Stats");
		return AppStatus::ERROR;
	}
	//Create level 
	level = new TileMap();
	if (level == nullptr)
	{
		LOG("Failed to allocate memory for Level");
		return AppStatus::ERROR;
	}
	//Initialise level
	if (level->Initialise() != AppStatus::OK)
	{
		LOG("Failed to initialise Level");
		return AppStatus::ERROR;
	}
	//Create enemy
	enemy_x = new Enemy({ 0,0 }, StateEnem::IDLE, LookEnem::RIGHT);
	if (enemy_x == nullptr)
	{
		LOG("Failed to allocate memory for Player");
		return AppStatus::ERROR;
	}
	//Initialise enemy
	if (enemy_x->Initialise() != AppStatus::OK)
	{
		LOG("Failed to initialise Player");
		return AppStatus::ERROR;
	}
	//Create door
	door = new Door({0,0});
	if (door == nullptr)
	{
		LOG("Failed to allocate memory for Door");
		return AppStatus::ERROR;
	}
	//Initialise enemy
	if (door->Initialise() != AppStatus::OK)
	{
		LOG("Failed to initialise Door");
		return AppStatus::ERROR;
	}
	//Load level
	if (LoadLevel(1) != AppStatus::OK)
	{
		LOG("Failed to load Level 1");
		return AppStatus::ERROR;
	}

	//Assign the tile map reference to the player to check collisions while navigating
	player->SetTileMap(level);
	enemy_x->SetTileMap(level);
	door->SetTileMap(level);
	return AppStatus::OK;
}
bool Scene::CheckTp()
{
	return false;
}
AppStatus Scene::LoadLevel(int stage)
{
	int size;
	int x, y, i;
	Tile tile;
	Point pos;
	int* map = nullptr;
	Object* obj;

	int a = (int)Tile::LETTER_A;
	int b = (int)Tile::LETTER_B;
	int c = (int)Tile::LETTER_C;
	int d = (int)Tile::LETTER_D;
	int e = (int)Tile::LETTER_E;
	int f = (int)Tile::LETTER_F;
	int g = (int)Tile::LETTER_G;
	int h = (int)Tile::LETTER_H;
	int i_= (int)Tile::LETTER_I;
	int j = (int)Tile::LETTER_J;
	int k = (int)Tile::LETTER_K;
	int l = (int)Tile::LETTER_L;
	int m = (int)Tile::LETTER_M;
	int n = (int)Tile::LETTER_N;
	int o = (int)Tile::LETTER_O;
	int p = (int)Tile::LETTER_P;
	int q = (int)Tile::LETTER_Q;
	int r = (int)Tile::LETTER_R;
	int s = (int)Tile::LETTER_S;
	int t = (int)Tile::LETTER_T;
	int u = (int)Tile::LETTER_U;
	int v = (int)Tile::LETTER_V;
	int w = (int)Tile::LETTER_W;
	int x_ = (int)Tile::LETTER_X;
	int y_ = (int)Tile::LETTER_Y;
	int z = (int)Tile::LETTER_Z;

	int _0 = (int)Tile::NUMBER_0;
	int _1 = (int)Tile::NUMBER_1;
	int _2 = (int)Tile::NUMBER_2;
	int _3 = (int)Tile::NUMBER_3;
	int _4 = (int)Tile::NUMBER_4;
	int _5 = (int)Tile::NUMBER_5;
	int _6 = (int)Tile::NUMBER_6;
	int _7 = (int)Tile::NUMBER_7;
	int _8 = (int)Tile::NUMBER_8;
	int _9 = (int)Tile::NUMBER_9;

	
	objects.clear();
	size = LEVEL_WIDTH * LEVEL_HEIGHT;
		if (stage == 1)
	{
		map = new int[size] {
	     0,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,	  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  0,
		 0,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,	  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  0,
		 0,  0,   h,  i_, 157,   0,   0,   0,   0,   0,   0,   0,   v,  i_,   t, 175, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 176,   s,   c,	 e,   n,   e,   0,   0,
		 0,  0,   _1,  p, 157,   0,   0,   0,   0,   0,   0,   0,   e,  x_,   p, 175, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 176,  _0,  _1, 157,  _0,  _1,   0,   0,
		 0,  1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,	 1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   0,
		 0,  2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,	1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   0,
		 0,  1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,	 1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   0,
		 0,  2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,	1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   0,
		 0,  3,   4,   5,   6,   7,   4,   5,   6,   7,   4,   5,   6,   7,   4,   5,   6,   7,   4,   5,   6,   7,	  4,   5,   6,   7,   4,   5,   6,   7,   4,   5,   6,   0,
		 0,  17,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,	  0,   0,  19,  16,   0,   0,   0,   0,   0,   0,   0,   0,
		 0,  16,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,	  0,   0,  26,  23,   0,   0,   0,	 0,   0,   0,   0,   0,
		 0,  16,  0,   0,   0,   0,   0,   0,   0,  52,  53,  54,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,	  0,   0,  19,  16,   0,   0,   0,   0,   0,   0,   0,   0,
		 0,  23,  0,   0,   0,   0,   0,   0,   0,  51, 106,  55,   0, 200,   0,   0,   0,   0,   0,   0,   0,   0,	  0,   0,   0,   0,   0,   0,   0,	 0,   0,   0,   0,   0,
		 0,  16,  0,   0,  34,  30,  30,  30,  30,  50,  30,  56,  30,  30,  30,  30,  30,  30,  30,  30,  30,  31,	  0,   0,   0,   0,   0,   0,  34,  30,  30,  30,  30,   0,
		 0,  17,  0,   0,   4,   5,  29,   5,   6,   7,   5,   4,   6,   7,   5,   4,   6,   7,   5,  29,   5,   4,	  0,   0,   0,   0,   0,   0,   4,   5,  29,   5,   8,   0,
		 0,  16,  0,   0,   0,   0,  28,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,   0,	  0,   0,   0,   0,   0,   0,   0,   0,  28,   0,  19,   0,
		 0,  16,  0,   0,   0,   0,  28,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,   0,	  0,   0,   0,   0,   0,  0,   0,   0,  28,   0,  19,   0,
		 0,  23,  0,   0,   0,   0,  28,   0,   0,   0,   0,  52,  53,  54,   0,   0,   0,   0,   0,  28,   0,   0,	  0,   0,   0,   0,   0,  0,   0,   0,  28,   0,  26,   0,
		 0,  16,  0, 204,   0,   0,  28,   0,   0,   0,   0,  51, 100,  55,   0,   0,   0,   0,   0,  28,   0,   0,	  0, 101,   0,  202,   0,   0,   0,	 0,  28,   0,  19,   0,
		 0,  21, 30,  30,  30,  30,  27,  30,  30,  30,  30,  50,  30,  56,  30,  30,  30,  30,  30,  27,  30,  30,  30,  30,  30,  206, 30,  30,  30,  30,  27,  30,  24,   0,
		 0,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,  2,	 1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   0,
		 0,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,	1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   0,
		 0,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,  2,	 1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   0,
	     0,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2, 	1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   0,
	     0, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 172, 178, 173, 173, 173, 173, 171,  0,
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,	  0,   0,   0,   0,   0,   0,   0, 174, 174, 174,   0,   0,  0,
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,	  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  0,
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,	  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  0,
};
		player->InitScore();
		currentStage = 1;
	}
	else if (stage == 2)
{
		map = new int[size] {
		0,    0,    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		0,    0,    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,	0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		0,    0,    h,  i_, 157,   0,   0,   0,   0,   0,   0,   0,   v,  i_,   t, 175, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 176,   s,   c,   e,   n,   e,   0,   0,
		0,    0,   _1,   p, 157,   0,   0,   0,   0,   0,   0,   0,   e,  x_,   p, 175, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 176,  _0,  _1, 157,  _0,  _2,   0,   0,
		0,    3,    4,   5,   6,   7,   4,   5,   6,   7,   4,   5,   6,   7,   4,   5,   6,   7,   4,   5,   6,   7,	4,   5,   6,   7,   4,   5,   6,   7,   4,   5,   6,   0,
		0,   17,    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,	0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		0,   15,    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,	0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	    0,   23,    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,	0,   0,   0,  52,  53,  54,   0,   0,   0,   0,   0,   0,
		0,   15,    0,   0,   0,   0,   0,   0,   0,  16,   0,  204,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,	0,   0,   0,  51,  100,  55,   0,   0,   0,   0,  19,   0,
		0,    0,    0,   0,   0,   0,   0,   0,   0,  21,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  50,  30,  56,  30,  30,  30,  30,  24,   0,
	    0,    0,    0,   0,   0,   0,   0,   0,   0,   7,   4,  29,   6,   7,   4,   5,   6,   7,   4,   5,   6,   7,   4,   5,   6,   7,   4,   5,   6,   7,   4,   5,   6,   0,
		0,    0,    0,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		0,    0,    0,   0,   101,   0,   202,   0,   0,   0,   0,  28,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	    0,   30,   30,  30,  30,  30, 206,  30,  30,  30,  30,  27,  31,  32,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  32,  34,  30,  30,  30,   0,
	    0,    3,    4,   5,   6,   7,   4,   5,   6,   7,   4,   5,   4,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  37,  38,   5,   4,   6,   0,
	    0,   17,    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,	0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
        0,   17,    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,	0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	    0,   15,    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,	0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	    0,   17,    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,	0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	    0,   17,    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,	0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	    0,   40,   41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,   0,
	    0,   41,   40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,   0,
	    0,   40,   41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,   0,
	    0,   41,   40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,   0,  
        0,  171,  171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 172, 178, 173, 173, 173, 173, 171,   0,  
		0,    0,    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 174, 174, 174,   0,   0,   0,
	    0,    0,    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		0,    0,    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	};
	currentStage = 2;
}
	else if (stage == 3)
	{
		map = new int[size] {
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		 0,   0,   h,  i_, 157,   0,   0,   0,   0,   0,   0,   0,   v,  i_,   t, 175, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 176,   s,   c,	  e,   n,   e,   0,   0,
		 0,   0,  _1,   p, 157,   0,   0,   0,   0,   0,   0,   0,   e,  x_,   p, 175, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 176,  _0,  _1, 157,  _0,  _3,   0,   0,
		 0,   7,   5,   4,   6,   7,   5,   4,   6,   7,   5,   4,   6,   7,   5,   4,   6,   7,   5,   4,   6,   7,   5,   4,   6,   7,   5,   4,   6,   7,   5,   4,   6,   0,
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	     0,   0,   0,   0,   0,   0,  52,  53,  54,   0,   0,   0,   0,   0,   0,   0,   0,  34,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,   0,
		 0,  16,   0,   0,   0,   0,  51,   0,  55,   0,   0,   0,   0,   0,   0,   0,   0,   7,   5,   4,   6,   7,  29,   4,   6,   7,   5,   4,   6,   7,  29,   4,   6,   0,
		 0,  21,  30,  30,  30,  30,  50,  30,  56,  30,  30,  30,  30,  31,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,   0,   0,   0,   0,   0,   0,  28,   0,   0,   0,
	     0,   7,   5,   4,   6,   7,   5,   4,   6,   7,   5,  29,   5,   4,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,   0,   0,   0,   0,   0,   0,  28,   0,   0,   0,
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,   0,   0,   0,   0,   0,   0,  28,   0,   0,   0,
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,   0,   0,   0,   0,   0,	  0,  28,   0,   0,   0,
		 0,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  27,  30,  30,  30,  30,  31,   0,   0,   0,  34,  30,  27,  30,  30,  30,  30,  30,  30,  30,  27,  30,  30,   0,
	     0,   7,   5,   4,   6,   7,   5,   4,   6,   7,   5,   4,   6,   7,   5,  29,   6,   0,   0,   0,   4,   5,   5,   4,   6,   7,   5,  29,	 6,   7,   5,   4,   6,   0,
		 0,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,   0,   0,   0,   0,   0,
         0,  16,   0,   0,  0,  0,  0,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,   0,   0,   0,   0,   0,
		 0,  16,   0,   0,  0,  0,  0,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,   0,   0,   0,  52,  53,  54,   0,   0,   0,   0,  28,   0,   0,   0,   0,   0,   0,
	     0,  16,   0, 101,  0,  202,  0,   0,   0,   0,   0,   0,   0,   204,   0,  28,   0,   0,   0,   0,  51,  100,  55,   0,   0,   0,   0,  28,   0,	  0,   0,   0,   19,   0,
		 0,  21,  30,  30,  60,  206,  62,  30,  30,  30,  30,  30,  30,  30,  30,  27,  30,  30,  30,  30,  50,  30,  56,  30,  30,  30,  30,  27,  30,  30,  30,  30,  24,   0,
		 0,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   0,
		 0,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,	  2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   0,
	     0,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   0,
		 0,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,	  2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   0,
	     0, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 172, 178, 173, 173, 173, 173, 171,   0,   
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,	  0,   0,   0,   0,   0,   0,   0, 174, 174, 174,   0,   0,   0,
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	};
	currentStage = 3;
	}
	else if (stage == 4)
	{
		map = new int[size] {
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		 0,   0,   h,  i_, 157,   0,   0,   0,   0,   0,   0,   0,   v,  i_,   t, 175, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 176,   s,   c,	  e,   n,   e,   0,   0,
		 0,   0,  _1,   p, 157,   0,   0,   0,   0,   0,   0,   0,   e,  x_,   p, 175, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 176,  _0,  _1, 157,  _0,  _3,   0,   0,
		 0,   7,   5,   4,   6,   7,   5,   4,   6,   7,   5,   4,   6,   7,   5,   4,   6,   7,   5,   4,   6,   7,   5,   4,   6,   7,   5,   4,   6,   7,   5,   4,   8,   0,
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  18,   0,
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  83,  85,  86,   0,   0,   0,   0,   0,   0,   0,   0,  83,  85,  86,   0,   0,   0,   0,  26,   0,
	     0,  30,  30,  30,  30,  30,  30,  30,  31,   0,   0,   0,   0,   0,  82,  84,  87,   0,   0,   0,   0,   0,   0,   0,   0,  82,  84,  87,   0,   0,   0,   0,  18,   0,
		 0,   7,   5,  29,   6,   7,   5,   4,   6,   0,   0,   0,   0,   0,  81,   0,  88,   0,   0,   0,   0,   0,   0,   0,   0,  81,   0,  88,   0,   0,   0,   0,  18,   0,
		 0,   0,   0,  28,   0,   0,   0,   0,   0,   0,   0,   0,  34,  30,  80,  30,  89,  30,  30,  30,  30,  30,  30,  30,  30,  80,  30,  89,  30,  31,   0,   0,  26,   0,
	     0,   0,   0,  28,   0,   0,   0,   0,   0,   0,   0,   0,   6,   7,   5,   4,   6,   7,   5,  29,   5,   4,   6,   7,   5,   4,   6,   7,   5,   4,   0,   0,  20,   0,
		 0,   0,   0,  28,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  18,   0,
		 0,   0,   0,  28,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,   0,   0,   0,   0,   0,   0,   0,   0,	 0,  0,  0,  18,   0,
		 0,  30,  30,  27,  30,  30,  30,  30,  31,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,   0,   0,   0,   0,   0,   0,   0,   0,  0,  0,  0,  18,   0,
	     0,   7,   5,   4,   6,   7,  29,   4,   6,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,   0,   0,   0,   0,   0,   0,   0, 101,  0,  202,  0,  26,   0,
		 0,   0,   0,   0,   0,   0,  28,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  34,  30,  27,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  206,  62,  24,   0,
         0,   0,   0,   0,   0,   0,  28,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   5,   4,   6,   7,   5,   4,   8,   1,   2,   1,   2,   1,   2,   1,   2,   0,
		 0,   0,   0,   0,   0,   0,  28,   0,   0,  52,  53,  54,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  18,   2,   1,   2,   1,   2,   1,   2,   1,   0,
	     0,   0,   0,   0,   0,   0,  28,   0,   0,  51,   100,  55,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   1,   2,   1,   2,   1,   2,   1,   2,   0,
		 0,   30, 30,  30,  30,  30,  27,  30,  30,  50,  30,  56,  30,  30,  30,  30,  31,   0,   0,   0,   0,   0,   0,   0,  18,   2,   1,   2,   1,   2,   1,   2,   1,   0,
		 0,   3,   5,   4,   6,   7,   5,   4,   6,   7,   5,   4,   6,   7,  29,   4,   6,   0,   0,   0,   0,   0,   0,   0,  18,   1,   2,   1,   2,   1,   2,   1,   2,   0,
		 0,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   2,   1,   2,   1,   2,   1,   2,   1,   0,
	     0,  23,  204,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,   0,   0,   0,   0,   0,   0,   0,   0,  18,   1,   2,   1,   2,   1,   2,   1,   2,   0,
		 0,  21,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  27,  30,  30,  30,  30,  30,  30,	 30,  30,  30,  24,   2,   1,   2,   1,   2,   1,   2,   1,   0,
	     0, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 172, 178, 173, 173, 173, 173, 171,   0,   
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,	  0,   0,   0,   0,   0,   0,   0, 174, 174, 174,   0,   0,   0,
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	};
	currentStage = 4;
	}
	else if (stage == 5)
	{
		map = new int[size] {
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		 0,   0,   h,  i_, 157,   0,   0,   0,   0,   0,   0,   0,   v,  i_,   t, 175, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 176,   s,   c,	  e,   n,   e,   0,   0,
		 0,   0,  _1,   p, 157,   0,   0,   0,   0,   0,   0,   0,   e,  x_,   p, 175, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 176,  _0,  _1, 157,  _0,  _3,   0,   0,
		 0, 302, 304, 305, 306, 302, 304, 305, 306, 302, 304, 305, 306, 302, 304, 305, 306, 302, 304, 305, 306, 302, 304, 305, 306, 302, 304, 305, 306, 302, 304, 305, 303,   0,
		 0, 312,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 318,   0,
		 0, 313,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   100,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 319,   0,
	     0, 312,   0,   0,   0,   0,   0,   0,   0, 326, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 327,   0,   0,   0,   0,   0,   0,   0, 318,   0,
		 0, 312,   0,   0,   0,   0,   0,   0,   0, 302, 304, 336, 306, 302, 304, 305, 306, 302, 304, 305, 306, 302, 304, 305, 306,   0,   0,   0,   0,   0,   0,   0, 318,   0,
		 0, 313,   0,   0,   0,   0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0,	  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 319,   0,
	     0, 312,   0,   0,  0,  0,  0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0,	  0,   0,   0,   0,  83,  85,  86,   0,   0,   0,   0, 318,   0,
		 0, 312,   0,   0,	0,  0,  0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  82,  84,  87,   0,   0,   0,   0, 318,   0,
		 0, 313,   0, 101,  0,  202,  0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0,	  0,   0,   0,   0,  81,   0,  88,   0,   0,   0,  204,319,   0,
		 0, 315, 325, 325, 362, 206, 364, 325, 325, 325, 325, 337, 327, 331, 330, 330, 330, 330, 330, 330, 331,	326, 325, 325, 325, 360, 325, 361, 325, 325, 325, 325, 321,   0,
	     0, 302, 304, 305, 306, 302, 336, 305, 306, 302, 304, 305, 328, 333, 332, 332, 332, 332, 332, 332, 333, 302, 336, 305, 306, 302, 304, 305, 306, 302, 304, 305, 303,   0,
		 0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0, 318,   0,
         0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0, 318,   0,
		 0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0, 319,   0,
	     0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0, 318,   0,
		 0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,	  0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0, 318,   0,
		 0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0, 318,   0,
		 0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0, 319,   0,
	     0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0, 318,   0,
		 0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0, 318,   0,
	     0, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 172, 178, 173, 173, 173, 173, 171,   0,   
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,	  0,   0,   0,   0,   0,   0,   0, 174, 174, 174,   0,   0,   0,
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		};
	currentStage = 5;
	}
	else if (stage == 6)
	{
		map = new int[size] {
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		 0,   0,   h,  i_, 157,   0,   0,   0,   0,   0,   0,   0,   v,  i_,   t, 175, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 176,   s,   c,	  e,   n,   e,   0,   0,
		 0,   0,  _1,   p, 157,   0,   0,   0,   0,   0,   0,   0,   e,  x_,   p, 175, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 176,  _0,  _1, 157,  _0,  _3,   0,   0,
		 0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0, 318,   0,
		 0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0, 318,   0,
		 0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0, 319,   0,
	     0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0, 318,   0,
		 0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,	  0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0, 318,   0,
		 0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,	  0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0, 319,   0,
	     0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,	  0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0, 318,   0,
		 0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0, 326, 325, 325, 325, 325, 325, 325, 325, 325, 325, 337, 325, 325, 325, 325, 325, 325, 325, 325, 325, 321,   0,
		 0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0, 305, 304, 336, 304, 306, 302, 304, 305, 306, 302, 305, 305, 303, 300, 301, 300, 301, 300, 301, 300, 301,   0,
		 0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,	  0,   0,   0,   0, 301, 300, 301, 300, 301, 300, 301, 302,   0,
	     0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 300, 301, 300, 301, 300, 301, 300, 301,   0,
		 0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 306, 302, 304, 305, 306, 302, 304, 303,   0,
         0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 318,   0,
		 0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 319,   0,
	     0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,  0,  0,  0,   0,   0,   0,   0,   0,   0,   0, 318,   0,
		 0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,	  0,  0,  0,  0,   0,   0,   0,   0,   0,   0,   0, 318,   0,
		 0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,  314, 335,  0,   0,   0,  204,  0,   0, 101,  0,  202,  0,   0,   0,   0,   0,  100,   0,   0, 318,   0,
		 0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,  315, 337, 325, 325, 325, 325, 325, 325, 325, 362, 206, 364, 325, 325, 325, 325, 325, 325, 325, 321,   0,
	     0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0, 305, 306, 302, 304, 305, 306, 302, 336, 306, 302, 304, 305, 306, 302, 304, 305, 306, 302, 304, 303,   0,
		 0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 318,   0,
	     0, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 172, 178, 173, 173, 173, 173, 171,   0,   
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		};
	currentStage = 6;
	}
	else if (stage == 7)
	{
		map = new int[size] {
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		 0,   0,   h,  i_, 157,   0,   0,   0,   0,   0,   0,   0,   v,  i_,   t, 175, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 176,   s,   c,	  e,   n,   e,   0,   0,
		 0,   0,  _1,   p, 157,   0,   0,   0,   0,   0,   0,   0,   e,  x_,   p, 175, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 176,  _0,  _1, 157,  _0,  _3,   0,   0,
		 0, 312,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 0,   335,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 318,   0,
		 0, 313,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 0,   335,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 318,   0,
		 0, 312,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 0,   335,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 319,   0,
	     0, 312,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 0,   335,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 318,   0,
		 0, 312,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 0,   335,	  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 318,   0,
		 0, 313,   0,   0,   0,   0, 335,   0,   0,   0,   0, 352, 353, 354,   0,   0,   0,   0,   0, 0,   335,	  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 319,   0,
	     0, 312,   0,   0, 204,   0, 335,   0,   0,   0,   0, 351,  100, 355,   0,   0,   0,   0,   0, 0,   335,	  0,   0, 318,   0,   0,   0,   0,   0,   0,   0,   0, 318,   0,
		 0, 315, 325, 325, 325, 325, 337, 325, 325, 325, 325, 350, 325, 356, 325, 325, 325, 325, 325, 325, 337, 325, 325, 321,   0,   0,   0,   0,   0,   0,   0,   0, 318,   0,
		 0, 301, 300, 301, 300, 301, 300, 301, 300, 301, 300, 301, 300, 301, 300, 301, 300, 302, 305, 306, 302, 336, 304, 305,   0,   0,   0,   0,   0,   0,   0,   0, 318,   0,
		 0, 301, 300, 301, 300, 301, 300, 301, 300, 301, 300, 301, 300, 301, 300, 301, 300, 312,   0,   0,   0,	335,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 319,   0,
	     0, 301, 300, 301, 300, 301, 300, 301, 300, 301, 300, 301, 300, 301, 300, 301, 300, 313,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 318,   0,
		 0, 301, 300, 301, 300, 301, 300, 301, 300, 301, 300, 301, 300, 301, 300, 301, 300, 312,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 319,   0,
         0, 302, 306, 302, 305, 304, 306, 302, 305, 304, 306, 302, 305, 304, 306, 302, 305,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 318,   0,
		 0, 312,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 319,   0,
	     0, 312,   0,   0,   0,   0,   0,   0,  0,  0,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 318,   0,
		 0, 312,   0,   0,   0,   0,   0,   0,  0,  0,  0,   0,   0,   0,   0, 326, 325, 325, 325, 325, 325, 337, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 321,   0,
	     0, 313,   0,   0,   0,   0,   0, 101,  0,  202,  0,   0,   0,   0,   0, 302, 304, 305, 306, 302, 305, 306, 302, 304, 305, 306, 302, 336, 305, 306, 302, 304, 303,   0,
		 0, 312,   0,   0, 326, 325, 325, 325, 362, 206, 364, 325, 325, 327,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0, 319,   0,
	     0, 312,   0,   0, 305, 304, 336, 302, 305, 304, 306, 302, 305, 304,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0, 318,   0,
		 0, 313,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0, 318,   0,
	     0, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 172, 178, 173, 173, 173, 173, 171,   0,   
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		};
	currentStage = 7;
	}
	else if (stage == 8)
	{
		map = new int[size] {
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		 0,   0,   h,  i_, 157,   0,   0,   0,   0,   0,   0,   0,   v,  i_,   t, 175, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 176,   s,   c,	  e,   n,   e,   0,   0,
		 0,   0,  _1,   p, 157,   0,   0,   0,   0,   0,   0,   0,   e,  x_,   p, 175, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 176,  _0,  _1, 157,  _0,  _3,   0,   0,
		 0, 312,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,  83,  85,  86,   0,   0,   0,   0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0, 318,   0,
		 0, 313,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,  82,  84,  87,   0,   0,   0,   0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0, 318,   0,
		 0, 312,   0,   0,   0,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,  81,   0,  88,   0,   0,   100,   0,   0,   0,   0,   0,   0, 335,   0,   0,   0,   0, 319,   0,
	     0, 315, 325, 325, 325, 325, 337, 325, 327,   0,   0,   0, 326, 325, 325, 360, 325, 361, 325, 325, 325, 327,   0,   0,   0, 326, 325, 337, 325, 325, 325, 325, 321,   0,
		 0, 302, 304, 336, 306, 302, 304, 305, 306,   0,   0,   0, 304, 305, 306, 302, 304, 305, 306, 302, 304, 305,   0,   0,   0, 302, 304, 305, 306, 302, 336, 302, 303,   0,
		 0, 313,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,	  0,   0,   0,   0,   0,   0,   0,   0,   0, 335,   0, 319,   0,
	     0, 312,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 335,   0, 318,   0,
		 0, 313,   0, 335,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 335,   0, 318,   0,
		 0, 312,   0, 335, 204,   0,   0,  101,  0,   202,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 335,   0, 318,   0,
		 0, 315, 325, 337, 325, 325, 325, 325, 325, 206, 325, 325, 327, 331, 330, 330, 330, 330, 330, 330, 331, 326, 325, 325, 325, 325, 325, 325, 325, 325, 337, 325, 321,   0,
	     0, 302, 304, 305, 306, 302, 304, 305, 306, 302, 304, 305, 328, 333, 332, 332, 332, 332, 332, 332, 333, 328, 304, 305, 306, 302, 304, 305, 306, 302, 304, 305, 303,   0,
		 0, 312,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 319,   0,
         0, 313,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 318,   0,
		 0, 312,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 319,   0,
	     0, 312,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 318,   0,
		 0, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341,   0,
	     0, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340,   0,
		 0, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341,   0,
	     0, 340, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340,   0,
		 0, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340, 341, 340,   0,
	     0, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 172, 178, 173, 173, 173, 173, 171,   0,   
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		};
	currentStage = 8;
	}
	else if (stage == 9)
	{
		map = new int[size] {
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		 0,   0,   h,  i_, 157,   0,   0,   0,   0,   0,   0,   0,   v,  i_,   t, 175, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 176,   s,   c,	  e,   n,   e,   0,   0,
		 0,   0,  _1,   p, 157,   0,   0,   0,   0,   0,   0,   0,   e,  x_,   p, 175, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 176,  _0,  _1, 157,  _0,  _3,   0,   0,
		 0,   3,   4,   5,   6,   7,   4,   5,   6,   7,   4,   5,   6,   7, 408,   5,   6,   7,   4,   5,   6,   7, 408, 405, 405, 405, 405, 405, 405, 405, 408,   5,   6,   0,
		 0,  22,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 406,   0,   0,   0,   0,   0,   0,   0, 406,   0,   0,   0,   0,   0,   0,   0, 406,   0,   0,   0,
		 0,  22,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 406,   0,   0,   0,   0,   0,   0,   0, 406,   0,   0,   0,   0,   0,   0,   0, 406,   0,   0,   0,
	     0,  23,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 406,   0,   0,   0,   0,   0,   0,	  0, 406,   0,   0,   0,   0,   0,   0,   0, 406,   0,   0,   0,
		 0,  22,   0,   100,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 406,   0,   0,   0,   0,   0,   0,	  0, 406,   0,   0,  83,  85,  86,   0,   0, 406,   0,   0,   0,
		 0,  21,  30,  30,  30,  30,  30,  30,  31,   0,   0,   0,   0,   0, 406,   0,   0,   0,   0,   0,   0,	  0, 406,   0,   0,  82,  84,  87,   0,   0, 406,   0,   0,   0,
	     0,  23,   4,   5,   6,   7,  29,   5,   6,   0,   0,   0,   0,   0, 407,   0,   0,   0,   0,   0,   0,   0, 407,   0,   0,  81,   0,  88,   0,   0, 407,  204,  19,   0,
		 0,  22,   0,   0,   0,   0,  28,   0,   0,  34,  30,  30,  30,  30, 409,  30,  30,  30,  30,  30,  30,  30, 409,  30,  30,  80,  30,  89,  30,  30, 409,  30,  24,   0,
		 0,  23,   0,   0,   0,   0,  28,   0,   0,   7,   4,  29,   6,   7, 408, 405, 405, 405, 405, 405, 405, 405, 408, 405, 405, 405, 405, 405, 405, 405, 408,   5,   6,   0,
		 0,  22,   0,   0,   0,   0,  28,   0,   0,   0,   0,  28,   0,   0, 406,   0,   0,   0,   0,   0,   0,   0, 406,   0,   0,   0,   0,   0,   0,   0, 406,   0,   0,   0,
	     0,  22,   0,   0,   0,   0,  28,   0,   0,   0,   0,  28,   0,   0, 406,   0,   0,   0,   0,   0,   0,   0, 406,   0,   0,   0,   0,   0,   0,   0, 406,   0,   0,   0,
		 0,  21,  30,  30,  30,  30,  27,  30,  31,   0,   0,  28,   0,   0, 406,   0,   0,   0,   0,   0,   0,   0, 406,   0,   0,   0,   0,   0,   0,   0, 406,   0,   0,   0,
         0,  22,   4,  29,   6,   7,   4,   5,   6,   0,   0,  28,   0,   0, 406,   0,   0,   0,  0,  0,  0,   0, 406,   0,   0,   0,   0,   0,   0,   0, 406,   0,   0,   0,
		 0,  22,   0,  28,   0,   0,   0,   0,   0,   0,   0,  28,   0,   0, 406,   0,   0,   0,  0,  0,  0,   0, 406,   0,   0,   0,   0,   0,   0,   0, 406,   0,   0,   0,
	     0,  22,   0,  28,   0,   0,   0,   0,   0,   0,   0,  28,   0,   0, 407,   0,   0, 101,  0,  202,  0,   0, 407,   0,   0,   0,   0,   0,   0,   0, 407,   0,   0,   0,
		 0,  23,   0,  28,   0,   0,   0,   0,   0,  34,  30,  27,  30,  30, 409,  30,  30,  30,  60,  206,  62,  30, 409,  30,  30,  30,  30,  30,  30,  30, 409,  30,  30,   0,
	     0,  22,   0,  28,   0,   0,   0,   0,   0,   7,   4,   5,   6,   7, 408, 405, 405, 405, 405, 405, 405, 405, 408,   4,   5,   6,   7,  29,   6,   7, 408, 405, 405,   0,
		 0,  22,   0,  28,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,   0,   0,   0,   0,   0,
	     0,  23,   0,  28,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,   0,   0,   0,   0,   0,
		 0,  22,   0,  28,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,   0,   0,   0,   0,   0,
	     0, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 172, 178, 173, 173, 173, 173, 171,   0,   
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		};
	currentStage = 9;
	}
	else if (stage == 10)
	{
		map = new int[size] {
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		 0,   0,   h,  i_, 157,   0,   0,   0,   0,   0,   0,   0,   v,  i_,   t, 175, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 176,   s,   c,	  e,   n,   e,   0,   0,
		 0,   0,  _1,   p, 157,   0,   0,   0,   0,   0,   0,   0,   e,  x_,   p, 175, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 176,  _0,  _1, 157,  _0,  _3,   0,   0,
		 0,   3,   4,   5,   6,   7, 408,   5,   6,   7,   4,   5,   6,   7, 408,   5,   6,   7,   4,   5,   6,   7, 408,   5,   6,   7,   4,   5,   6,   7,   4,   5,   8,   0,
		 0,   0,   0,   0,   0,   0, 406,   0,   0,   0,   0,   0,   0,   0, 406,   0,   0,   0,   0,   0,   0,   0, 406,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
		 0,   0,   0,   0,   0,   0, 406,   0,   0,   0,   0,   0,   0,   0, 406,   0,   0,   0,   0,   0,   0,   0, 406,   0,   0,   0,   0,  0,  0,  0,   0,   0,  25,   0,
	     0,   0,   0,   0,   0,   0, 406,   0,   0,   0,   0,   0,   0,   0, 406,   0,   0,   0,   0,   0,   0,	  0, 406,   0,   0,   0,   0,  0,  0,  0,   0,   0,  26,   0,
		 0,   0,   0,   0,   0,   0, 406,   0,   0,   0,   0,   0,   0,   0, 406,   0,   0,   0,   0,   0,   0,	  0, 406,   0,   0,   0, 101,  0,  202,  0,   0,   0,  25,   0,
		 0,   0,   0,   0,   0,   0, 406,   0,   0,   0,   0,   0,   0,   0, 406,   0,   0,   0,   0,   0,   0,	  0, 406,   0,   0,  34,  30,  60,  206,  62,  30,  30,  24,   0,
	     0,   0,   0,   0,   0,   0, 407,   0,   0,   0,   0,   0,   0,   0, 407,   0,   0,   0,   100,   0,   0,   0, 407,   0,   0,   7,   4,   5,   6,   7,  29,   5,  25,   0,
		 0,  30,  30,  30,  30,  30, 409,  30,  30,  30,  30,  30,  30,  30, 409,  30,  30,  30,  30,  30,  30,  30, 409,  30,  31,   0,   0,   0,   0,   0,  28,   0,  26,   0,
		 0,   7,   4,  29,   6,   7, 408,   5,   6,   7,   4,   5,   6,   7, 408, 405, 405, 405, 405, 405, 405, 405, 408,   5,   6,   0,   0,   0,   0,   0,  28,   0,  25,   0,
		 0,   0,   0,  28,   0,   0, 406,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 406,   0,   0,   0,   0,   0,   0,   0,  28,   0,  26,   0,
	     0,   0,   0,  28,   0,   0, 407,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 406,   0,   0,   0,   0,   0,   0,   0,  28,   0,  25,   0,
		 0,   0,   0,  28,   0,   0, 406,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 406,   0,   0,  34,  30,  30,  30,  30,  27,  30,  24,   0,
         0,   0,   0,  28,   0,   0, 406,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 406,   0,   0,   7,   4,  29,   6,   7,   4,   5,   8,   0,
		 0,   0,   0,  28,   0,   0, 406,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 406,   0,   0,   0,   0,  28,   0,   0,   0,   0,  25,   0,
	     0,   0,   0,  28,   0,   0, 407,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  19,   0,   0,   0,   0, 407,   0,   0,   0,   0,  28,   0,   0,   0,  204,  26,   0,
		 0,  30,  30,  27,  30,  30, 409,  30,  31,   0,   0,   0,   0,   0,   0,   0,   0,  24,  30,  30,  30,  30, 409,  30,  30,  30,  30,  27,  30,  30,  30,  30,  24,   0,
	     0, 405, 405, 405, 405, 405, 408,   5,   6,   0,   0,   0,   0,   0,   0,   0,   0,   7,   4,  29,   6,   7, 408,   5,   6,   7,   4,   5,   6,   7,  29,   5,   8,   0,
		 0,   0,   0,   0,   0,   0, 406,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,   0, 406,   0,   0,   0,   0,   0,   0,   0,  28,   0,  25,   0,
	     0,   0,   0,   0,   0,   0, 406,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,   0, 406,   0,   0,   0,   0,   0,   0,   0,  28,   0,  26,   0,
		 0,   0,   0,   0,   0,   0, 406,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,   0, 406,   0,   0,   0,   0,   0,   0,   0,  28,   0,  25,   0,
	     0, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 172, 178, 173, 173, 173, 173, 171,   0,   
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		};
	currentStage = 10;
	}
	else if (stage == 11)
	{
		map = new int[size] {
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		 0,   0,   h,  i_, 157,   0,   0,   0,   0,   0,   0,   0,   v,  i_,   t, 175, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 176,   s,   c,	  e,   n,   e,   0,   0,
		 0,   0,  _1,   p, 157,   0,   0,   0,   0,   0,   0,   0,   e,  x_,   p, 175, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 176,  _0,  _1, 157,  _0,  _3,   0,   0,
		 0,  22,   0,  28,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 406,   0,   0,   0,   0,   0,   0,   0, 406,   0,   0,   0,   0,  28,   0,   0, 406,   0,   0,   0,
		 0,  22,   0,  28,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 406,   0,   0,   0,   0,   0,   0,   0, 406,   0,   0,   0,   0,  28,   0,   0, 406,   0,   0,   0,
		 0,  22,   0,  28,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 407,   0,   0,   0,   0,   0,   100,   0, 406,   0,   0,   0,   0,  28,   0,   0, 407,   0,   0,   0,
	     0,  23,   0,  28,   0,   0,   0,   0,   0,  34,  30,  30,  30,  30, 409,  30,  30,  30,  30,  30,  30,	 30, 409,  30,  30,  30,  30,  27,  30,  30, 409,  30,  30,   0,
		 0,  22,   0,  28,   0,  83,  85,  86,   0,   7,   4,  29,   6,   7, 408, 405, 405, 405, 405, 405, 405,	405, 408, 405, 405, 405, 405, 405, 405, 405, 408,   5,   6,   0,
		 0,  22,   0,  28,   0,  82,  84,  87,   0,   0,   0,  28,   0,   0, 406,   0,   0,   0,   0,   0,   0,	  0,   0,   0,   0,   0,   0,   0,   0,   0, 406,   0,   0,   0,
	     0,  23,   0,  28,   0,  81,   0,  88,   0,   0,   0,  28,   0,   0, 406,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 406,   0,   0,   0,
		 0,  21,  30,  27,  30,  80,  30,  89,  31,   0,   0,  28,   0,   0, 406,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 406,   0,   0,   0,
		 0,  22,   4,   5,   6,   7,  29,   5,   6,   0,   0,  28,   0,   0, 406,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 406,   0,   0,   0,
		 0,  22,   0,   0,   0,   0,  28,   0,   0,   0,   0,  28,   0,   0, 406,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 406,   0,   0,   0,
	     0,  23,   0,   0,   0,   0,  28,   0,   0,   0,   0,  28,   0,   0, 407,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 407,   0,   0,   0,
		 0,  21,  30,  30,  30,  30,  27,  30,  30,  30,  30,  27,  30,  30, 409,  30,  31,   0,   0,   0,   0,   0,   0,   0,   0,  34,  30,  30,  30,  30, 409,  30,  30,   0,
         0,  22,   4,   5,   6,   7,   4,   5,   6,   7,   4,   5,   6,   7,  29,   5,   6,   0,   0,   0,   0,   0,   0,   0,   0,   7,   4,  29,   6,   7, 408, 405, 405,   0,
		 0,  23,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,   0,   0,   0,   0,   0,
	     0,  22,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,   0,   0,   0,   0,   0,
		 0,  22,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,   0,   0,   0,   0,   0,   0,  52,  53,  54,   0,   0,  28,   0,   0,   0,   0,   0,   0,
	     0,  22,  204,  0,   0,   0,   0,   101,   0,   202,   0,   0,   0,   0,  28,   0,   0,   0,   0,   0,   0,   0,  51,   0,  55,   0,   0,  28,   0,   0,   0,   0, 19,   0,
		 0,  21,  30,  30,  30,  30,  30,  30,  30,  206,  30,  30,  30,  30,  27,  30,  30,  30,  30,  30,  30,  30,  50,  30,  56,  30,  30,  27,  30,  30,  30,  30,  24,   0,
	     0, 400, 401, 400, 401, 400, 401, 401, 401, 400, 401, 400, 401, 400, 401, 401, 401, 400, 401, 401, 401, 400, 401, 400, 401, 400, 401, 401, 401, 400, 401, 400, 401,   0,
		 0,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,   0,
	     0, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 172, 178, 173, 173, 173, 173, 171,   0,   
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		};
	currentStage = 11;
	}
	else if (stage == 12)
	{
		map = new int[size] {
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		 0,   0,   h,  i_, 157,   0,   0,   0,   0,   0,   0,   0,   v,  i_,   t, 175, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 176,   s,   c,	  e,   n,   e,   0,   0,
		 0,   0,  _1,   p, 157,   0,   0,   0,   0,   0,   0,   0,   e,  x_,   p, 175, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 176,  _0,  _1, 157,  _0,  _3,   0,   0,
		 0,   0,   0,   0,   0,   0, 406,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,   0, 406,   0,   0,   0,   0,   0,   0,   0,  28,   0,  25,   0,
		 0,   0,   0,   0,   0,   0, 406,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,   0, 406,   0,   0,   0,   0,   0,   0,   0,  28,   0,  26,   0,
		 0,   0,   0,   0,   0,   0, 407,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,   0, 406,   0,   0,   0,   0,   0,   0,   0,  28,   0,  25,   0,
	     0,  30,  30,  30,  30,  30, 409,  30,  31,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,	  0, 406,   0,   0,  34,  30,  30,  30,  30,  27,  30,  24,   0,
		 0,   7,   4,  29,   6,   7, 408,   5,   6,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,	  0, 406,   0,   0,   7,   4,  29,   6,   7,   4,   5,   8,   0,
		 0,   0,   0,  28,   0,   0, 406,   0,   0,   0,   0,   0,   0,   0,  52,  53,  54,   0,   0,  28,	 0,   0, 406,   0,   0,   0,   0,  28,   0,   0,   0,   0,  25,   0,
	     0,   0,   0,  28,   0,   0, 406,   0,   0,   0,   0,   0,   0,   0,  51,   100,  55,   0,   0,  28,   0,   0, 407,   0,   0,   0,   0,  28,   0,   0,   0,   0,  25,   0,
		 0,   0,   0,  28,   0,   0, 407,   0,   0,  34,  30,  30,  30,  30,  50,  30,  56,  30,  30,  27,  30,  30, 409,  30,  31,   0,   0,  28,   0,   0,   0,   0,  26,   0,
		 0,   0,   0,  28,   0,   0, 406,   0,   0,   7,   4,  29,   6,   7, 408, 405, 405, 405, 405, 405, 405, 405, 408,   5,   6,   0,   0,  28,   0,   0,   0,   0,  25,   0,
		 0,   0,   0,  28,   0,   0, 406,   0,   0,   0,   0,  28,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,   0,   0,   0,  26,   0,
	     0,   0,   0,  28,   0,   0, 407,   0,   0,   0,   0,  28,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,   0,   0,   0,  25,   0,
		 0,  30,  30,  27,  30,  30, 409,  30,  31,   0,   0,  28,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  34,  30,  27,  30,  30,  30,  30,  24,   0,
         0, 405, 405, 405, 405, 405, 408,   5,   6,   0,   0,  28,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   4,   5,   6,   7,  29,   5,   8,   0,
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,  25,   0,
	     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,   0,   0,   0,   0,   0,  83,  85,  86,   0,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,  25,   0,
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,   0,   0,   0,   0,   0,  82,  84,  87,   0,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,  26,   0,
	     0,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,   0,   0,   0,   0,   0,  81,   0,  88,   0,   0,  101,  0,  202,   0,   0,   0,   0,  28,  204,  25,   0,
		 0,  21,  30,  30,  30,  30,  30,  30,  30,  30,  30,  27,  30,  30,  30,  30,  30,  30,  80,  30,  89,  30,  30,  30,  30,  206,  30,  30,  30,  30,  27,  30,  24,   0,
	     0, 400, 401, 400, 401, 400, 401, 401, 401, 400, 401, 400, 401, 400, 401, 401, 401, 400, 401, 401, 401, 400, 401, 400, 401, 400, 401, 401, 401, 400, 401, 400, 401,   0,
		 0,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,  40,  41,   0,
	     0, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 172, 178, 173, 173, 173, 173, 171,   0,   
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		};
	currentStage = 12;
}
	else
	{
		//Error level doesn't exist or incorrect level number
		LOG("Failed to load level, stage %d doesn't exist", stage);
		return AppStatus::ERROR;
	}

	//Entities and objects
	i = 0;
	for (y = 0; y < LEVEL_HEIGHT; ++y)
	{
		for (x = 0; x < LEVEL_WIDTH; ++x)
		{
			tile = (Tile)map[i];
			if (tile == Tile::EMPTY)
			{
				map[i] = 0;
			}
			else if (tile == Tile::PLAYER)
			{
				pos.x = x * TILE_SIZE;
				pos.y = y * TILE_SIZE + TILE_SIZE - 1;
				player->SetPos(pos);
				map[i] = 0;
			}
			else if (tile == Tile::ENEMY_X)
			{
				pos.x = x * TILE_SIZE;
				pos.y = y * TILE_SIZE + TILE_SIZE - 1;
				enemy_x->SetPos(pos);
				map[i] = 0;
			}
			else if (tile == Tile::DOOR)
			{
				pos.x = x * TILE_SIZE;
				pos.y = y * TILE_SIZE + TILE_SIZE - 1;
				door->SetPos(pos);
				map[i] = 0;
			}
			else if (tile == Tile::ITEM_KEY)
			{
				pos.x = x * TILE_SIZE;
				pos.y = y * TILE_SIZE + TILE_SIZE - 1;
				obj = new Object(pos, ObjectType::KEY);
				objects.push_back(obj);
				map[i] = 0;
			}
			else if (tile == Tile::HELMET)
			{
				pos.x = x * TILE_SIZE;
				pos.y = y * TILE_SIZE + TILE_SIZE - 1;
				obj = new Object(pos, ObjectType::HELMET);
				objects.push_back(obj);
				map[i] = 0;
			}
			else if (tile == Tile::ITEM_KEYHOLE)
			{
				pos.x = x * TILE_SIZE;
				pos.y = y * TILE_SIZE + TILE_SIZE - 1;
				obj = new Object(pos, ObjectType::KEYHOLE);
				objects.push_back(obj);
				map[i] = 0;
			}
			else if (tile == Tile::GOONIE)
			{
				pos.x = x * TILE_SIZE;
				pos.y = y * TILE_SIZE + TILE_SIZE - 1;
				obj = new Object(pos, ObjectType::GOONIE);
				objects.push_back(obj);
				map[i] = 0;
			}
			++i;
		}
	}
	//Tile map
	level->Load(map, LEVEL_WIDTH, LEVEL_HEIGHT);

	return AppStatus::OK;
}
void Scene::end()
{
	if (player->GetGoonie() == 12)
	{
		youWin = true;
	}
}
void Scene::Update()
{
	Point p1, p2;
	AABB box;

	//Switch between the different debug modes: off, on (sprites & hitboxes), on (hitboxes) 
	if (IsKeyPressed(KEY_D))
	{
		debug = (DebugMode)(((int)debug + 1) % (int)DebugMode::SIZE);
	}
	if (IsKeyPressed(KEY_W))
	{
		youWin = true;
	}
	if (IsKeyPressed(KEY_L))
	{
		youLose = true;
	}
	//Debug levels instantly
	if (IsKeyPressed(KEY_ONE))
	{
		LoadLevel(1);
	}
	else if (IsKeyPressed(KEY_TWO))
	{
		LoadLevel(2);
	}
	else if (IsKeyPressed(KEY_THREE))
	{
		LoadLevel(3);
	}
	else if (IsKeyPressed(KEY_FOUR))
	{
		LoadLevel(4);
	}
	else if (IsKeyPressed(KEY_FIVE))
	{
		LoadLevel(5);
	}
	else if (IsKeyPressed(KEY_SIX))
	{
		LoadLevel(6);
	}
	else if (IsKeyPressed(KEY_SEVEN))
	{
		LoadLevel(7);
	}
	else if (IsKeyPressed(KEY_EIGHT))
	{
		LoadLevel(8);
	}
	else if (IsKeyPressed(KEY_NINE))
	{
		LoadLevel(9);
	}
	else if (IsKeyPressed(KEY_ZERO))
	{
		LoadLevel(10);
	}
	else if (IsKeyPressed(KEY_O))
	{
		LoadLevel(11);
	}
	else if (IsKeyPressed(KEY_P))
	{
		LoadLevel(12);
	}
	else if (player->NextLevelX() && currentStage == 1)
	{
		LoadLevel(2);
		player->SetPos({ 10, player->GetY() });
	}
	else if (player->PrevLevelX() && currentStage == 2)
	{
		LoadLevel(1);
		player->SetPos({ 250, player->GetY() });
	}
	else if (player->NextLevelX() && currentStage == 2)
	{
		LoadLevel(3);
		player->SetPos({ 10, player->GetY() });
	}
	else if (player->PrevLevelX() && currentStage == 3)
	{
		LoadLevel(2);
		player->SetPos({ 250, player->GetY() });
	}
	else if (player->NextLevelX() && currentStage == 3)
	{
		LoadLevel(4);
		player->SetPos({ 10, player->GetY() });
	}
	else if (player->PrevLevelX() && currentStage == 4)
	{
		LoadLevel(3);
		player->SetPos({ 250, player->GetY() });
	}
	else if (player->NextLevelY() && currentStage == 5)
	{
		LoadLevel(6);
		player->SetPos({ player->GetX(), 40 });
	}
	else if (player->PrevLevelY() && currentStage == 6)
	{
		LoadLevel(5);
		player->SetPos({ player->GetX(), 164 });
	}
	else if (player->NextLevelY() && currentStage == 6)
	{
		LoadLevel(7);
		player->SetPos({ player->GetX(), 40 });
	}
	else if (player->PrevLevelY() && currentStage == 7)
	{
		LoadLevel(6);
		player->SetPos({ player->GetX(), 164 });
	}
	else if (player->NextLevelY() && currentStage == 7)
	{
		LoadLevel(8);
		player->SetPos({ player->GetX(), 40 });
	}
	else if (player->PrevLevelY() && currentStage == 8)
	{
		LoadLevel(7);
		player->SetPos({ player->GetX(), 164 });
	}
	else if (player->NextLevelX() && currentStage == 9)
	{
		LoadLevel(10);
		player->SetPos({ 10, player->GetY() });
	}
	else if (player->NextLevelY() && currentStage == 9)
	{
		LoadLevel(11);
		player->SetPos({ player->GetX(), 40});
	}
	else if (player->PrevLevelX() && currentStage == 10)
	{
		LoadLevel(9);
		player->SetPos({ 250, player->GetY()});
	}
	else if (player->NextLevelY() && currentStage == 10)
	{
		LoadLevel(12);
		player->SetPos({ player->GetX(), 40 });
	}
	else if (player->PrevLevelY() && currentStage == 11)
	{
		LoadLevel(9);
		player->SetPos({ player->GetX(), 164 });
	}
	else if (player->NextLevelX() && currentStage == 11)
	{
		LoadLevel(12);
		player->SetPos({ 10, player->GetY() });
	}
	else if (player->PrevLevelX() && currentStage == 12)
	{
		LoadLevel(11);
		player->SetPos({ 250, player->GetY() });
	}
	else if (player->PrevLevelY() && currentStage == 12)
	{
		LoadLevel(10);
		player->SetPos({ player->GetX(), 164 });
	}

	level->Update();
	player->Update();
	enemy_x->Update();
	door->Update();

	CheckCollisions();
}
void Scene::Render()
{
	BeginMode2D(camera);

	level->Render();
	if (debug == DebugMode::OFF || debug == DebugMode::SPRITES_AND_HITBOXES)
	{
		RenderObjects();
		player->Draw();
		enemy_x->Draw();
		door->Draw();
	}
	if (debug == DebugMode::SPRITES_AND_HITBOXES || debug == DebugMode::ONLY_HITBOXES)
	{
		RenderObjectsDebug(YELLOW);
		player->DrawDebug(GREEN);
		enemy_x->DrawDebug(BLUE);
		door->DrawDebug(YELLOW);
	}
	
	EndMode2D();

	RenderGUI();
}
void Scene::Release()
{
	level->Release();
	player->Release();
	enemy_x->Release();
	door->Release();

	ClearLevel();
}
void Scene::CheckCollisions()
{
	AABB player_box, obj_box, att_box;

	player_box = player->GetHitbox();
	auto it = objects.begin();
	bool key = false;
	if (player->GetState() == State::ATTACK)
	{
		att_box = player->GetHitboxAttacking();
	}
	while (it != objects.end())
	{
		obj_box = (*it)->GetHitbox();
		if (player_box.TestAABB(obj_box))
		{
			if ((*it)->GetType() == ObjectType::KEY)
			{
				player->KeyRecollected();
				//sonido salto - jump ---------------------
				Sound jump = LoadSound("music/collect.ogg");
				PlaySound(jump);
				//-----------------------------------------
				key = true;
			}
			//Delete the object
			if ((*it)->GetType() == ObjectType::KEYHOLE && !player->HasKey())
			{
				++it;
			}
			else if ((*it)->GetType() == ObjectType::GOONIE && !door->IsOpen())
			{
				++it;
			}
			else if ((*it)->GetType() == ObjectType::GOONIE && door->IsOpen())
			{
				player->IncreaseGoonie();
				//sonido salto - jump ---------------------
				Sound jump = LoadSound("music/jump.ogg");
				PlaySound(jump);
				//-----------------------------------------
				door->SetAnimation((int)DoorAnim::CLOSED);
				door->isopen = false;
				player->stats->IncrementExperience(10);
				player->stats->IncrementScore((*it)->Points());
				delete* it;
				it = objects.erase(it);
			}
			else if ((*it)->GetType() == ObjectType::KEYHOLE && player->HasKey())
			{
				//sonido salto - jump ---------------------
				Sound jump = LoadSound("music/jump.ogg");
				PlaySound(jump);
				//-----------------------------------------
				player->KeyUsed();
				door->SetAnimation((int)DoorAnim::OPEN);
				door->isopen = true;
				player->stats->IncrementScore((*it)->Points());
				delete* it;
				it = objects.erase(it);
			}
			else if ((*it)->GetType() == ObjectType::HELMET)
			{
				//sonido salto - jump ---------------------
				Sound jump = LoadSound("music/jump.ogg");
				PlaySound(jump);
				//-----------------------------------------
				delete* it;
				it = objects.erase(it);
				Object* obj = new Object({16,207}, ObjectType::BIG_HELMET);
				objects.push_back(obj);
			}
			else { 
				//sonido salto - jump ---------------------
				Sound jump = LoadSound("music/jump.ogg");
				PlaySound(jump);
				//-----------------------------------------
				player->stats->IncrementScore((*it)->Points());
				delete* it;
				it = objects.erase(it);
				if (key)
				{
					key = false;
				}
			}
			//Erase the object from the vector and get the iterator to the next valid element
		}
		else
		{
			//Move to the next object
			++it;
		}
	}
	AABB enemy_box;

	enemy_box = enemy_x->GetHitbox();
	//Check collision between player and enemy
	if (player_box.TestAABB(enemy_box) && player->stats->GetLives() == 0)
	{
		youLose = true;
	}
	else if (player_box.TestAABB(enemy_box)) {
		player->stats->LoseLives();
	}
	else if (player->attackHitbox.TestAABB(enemy_box) && player->GetState() == State::ATTACK)
	{
		player->stats->IncrementExperience(ENEMY_EXPERIENCE);
		player->stats->IncrementScore(ENEMY_PUNTUATION);
		delete enemy_x;
		enemy_x = nullptr;
	}
}
void Scene::ClearLevel()
{
	for (Object* obj : objects)
	{
		delete obj;
	}
	for (Enemy* enemy : enemies)
	{
		delete enemy;
	}
	objects.clear();
}
void Scene::RenderObjects() const
{
	for (Object* obj : objects)
	{
		obj->Draw();
	}
}
void Scene::RenderObjectsDebug(const Color& col) const
{
	for (Object* obj : objects)
	{
		obj->DrawDebug(col);
	}
}
void Scene::RenderGUI() const
{
	player->stats->DrawHealthBar();
	player->stats->DrawExperienceBar();
	//Temporal approach
	DrawText(TextFormat("%08d", player->stats->GetScore()), 40, 16, 8, WHITE);
	DrawText(TextFormat("%08d", player->stats->GetScore()), 40, 24, 8, WHITE);
}